#!/bin/bash

set -e  # Exit script immediately on any errors.

# Trigger sudo authorization at the beginning of the script.
sudo -v

# Keep sudo active.
while true; do sudo -v; sleep 50; done &
SUDO_PID=$!

# Function to clean up background process on script exit.
cleanup() {
    echo "Cleaning up..."
    kill $SUDO_PID
}
trap cleanup EXIT

# Directory for the kernel source.
KERNEL_DIR=~/linux
KERNEL_INSTALL_PATH=/boot/firmware

# Determine the script directory.
SCRIPT_DIR=$(dirname "$0")

# Check if a commit ID or user is provided in the "commitid" file.
if [ -f "$SCRIPT_DIR/commitid" ]; then
    COMMIT_INFO=$(cat "$SCRIPT_DIR/commitid")
    if [[ "$COMMIT_INFO" == *":"* ]]; then
        REPO_USER=${COMMIT_INFO%%:*}
        COMMIT_ID=${COMMIT_INFO##*:}
        echo "Using repository user: $REPO_USER and commit ID: $COMMIT_ID"
    else
        COMMIT_ID=$COMMIT_INFO
        REPO_USER="raspberrypi"
        echo "Using default repository user: $REPO_USER and commit ID: $COMMIT_ID"
    fi
else
    REPO_USER="torvalds"  # Default to Torvalds if no user/commit provided.
    COMMIT_ID="master"
    echo "No commit ID or user provided. Using default repository user: $REPO_USER and the active branch."
fi

# Ensure the kernel source directory is present.
if [ ! -d "$KERNEL_DIR" ]; then
    echo "Cloning the Linux kernel repository for user: $REPO_USER..."
    git clone --depth 1 https://github.com/$REPO_USER/linux $KERNEL_DIR
fi

cd $KERNEL_DIR

# Checkout the specified commit ID if provided.
if [ -n "$COMMIT_ID" ]; then
    git fetch --depth 1 origin $COMMIT_ID
    git checkout $COMMIT_ID
fi

# Parse arguments to check for compile-only or specific Pi model.
ONLY_COMPILE=0
ONLY_PI5=0

for arg in "$@"; do
    if [ "$arg" = "--only-compile" ]; then
        ONLY_COMPILE=1
    elif [ "$arg" = "--only-pi5" ]; then
        ONLY_PI5=1
    fi
done

compile_kernel() {
    local config=$1
    local kernel_name=$2

    echo "Compiling kernel for config: $config"
    make $config
    make -j6 Image.gz modules dtbs
}

install_kernel() {
    local kernel_name=$1

    if [ $ONLY_COMPILE -eq 0 ]; then
        echo "Installing kernel: $kernel_name"
        sudo make -j6 modules_install
        sudo cp arch/arm64/boot/Image.gz "$KERNEL_INSTALL_PATH/$kernel_name.img"
        sudo cp arch/arm64/boot/dts/broadcom/*.dtb $KERNEL_INSTALL_PATH/
        sudo cp arch/arm64/boot/dts/overlays/*.dtb* $KERNEL_INSTALL_PATH/overlays/
        sudo cp arch/arm64/boot/dts/overlays/README $KERNEL_INSTALL_PATH/overlays/
    else
        echo "Skipping installation for $kernel_name"
    fi
}

# Update /boot/config.txt to ensure correct kernel is loaded based on the Pi model.
update_config_txt() {
    local config_path="/boot/firmware/config.txt"
    sudo sed -i '/^\[pi3\]/,+2 d' $config_path
    sudo sed -i '/^\[pi4\]/,+2 d' $config_path
    sudo sed -i '/^\[pi5\]/,+2 d' $config_path
    echo "[pi3]" | sudo tee -a $config_path
    echo "kernel=kernel8.img" | sudo tee -a $config_path
    echo "[pi4]" | sudo tee -a $config_path
    echo "kernel=kernel8.img" | sudo tee -a $config_path
    echo "[pi5]" | sudo tee -a $config_path
    echo "kernel=kernel_2712.img" | sudo tee -a $config_path
    echo "[all]" | sudo tee -a $config_path
}

if [ $ONLY_PI5 -eq 1 ]; then
    compile_kernel bcm2712_defconfig kernel_2712
    install_kernel kernel_2712
else
    compile_kernel bcm2711_defconfig kernel8
    install_kernel kernel8
    compile_kernel bcm2712_defconfig kernel_2712
    install_kernel kernel_2712
fi

# Update config.txt if the installation is happening
if [ $ONLY_COMPILE -eq 0 ]; then
    update_config_txt
fi

echo "Kernel compilation and installation complete!"

