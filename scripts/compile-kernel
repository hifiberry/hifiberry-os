#!/bin/bash

# Trigger sudo authorization at the beginning of the script
sudo -v

# Keep sudo active
while true; do sudo -v; sleep 50; done &
SUDO_PID=$!

# Function to clean up background process on script exit
cleanup() {
    echo "Cleaning up..."
    kill $SUDO_PID
}
trap cleanup EXIT

# Directory for the kernel source
KERNEL_DIR=~/linux
KERNEL_INSTALL_PATH=/boot/firmware

# Ensure the kernel source directory is present
if [ ! -d "$KERNEL_DIR" ]; then
    echo "Cloning the Raspberry Pi Linux kernel..."
    git clone https://github.com/raspberrypi/linux $KERNEL_DIR
fi

cd $KERNEL_DIR

# List of driver substrings to be disabled
declare -a disable_drivers=("SOC_CHIPDIP" "SOC_PIFI" "SOC_RPI" "SOC_JUSTBOOM"
                             "SOC_IQAUDIO" "SOC_I_SABRE" "SOC_ADAU1977" "SND_AUDIOINJECTOR"
                             "SND_AUDIOSENSE" "SND_DIGIDAC1" "SOC_DIONAUDIO" "SOC_ALLO"
                             "SOC_FE" "SND_DACBERRY")

# Function to compile a kernel
compile_kernel() {
    local config=$1
    local kernel_name=$2

    echo "Compiling kernel with configuration: $config"
    make $config

    echo "Disabling specified drivers..."
    for driver in "${disable_drivers[@]}"; do
        # Disable all configs containing the driver substring, whether set as built-in or module
        grep -E "CONFIG.*$driver.*=(y|m)" .config | cut -d'=' -f1 | while read config_option; do
            scripts/config --file .config --set-val $config_option n
        done
    done

    # Save changes and regenerate .config
    make olddefconfig

    echo "Compiling kernel, modules, and device tree blobs using 6 parallel processes"
    make -j6 Image.gz modules dtbs
}

# Function to install a kernel
install_kernel() {
    local kernel_name=$1

    echo "Installing kernel: $kernel_name"
    sudo make -j6 modules_install
    sudo cp "$KERNEL_INSTALL_PATH/$kernel_name.img" "$KERNEL_INSTALL_PATH/${kernel_name}-backup.img"
    sudo cp arch/arm64/boot/Image.gz "$KERNEL_INSTALL_PATH/$kernel_name.img"
    sudo cp arch/arm64/boot/dts/broadcom/*.dtb $KERNEL_INSTALL_PATH/
    sudo cp arch/arm64/boot/dts/overlays/*.dtb* $KERNEL_INSTALL_PATH/overlays/
    sudo cp arch/arm64/boot/dts/overlays/README $KERNEL_INSTALL_PATH/overlays/
}

# Update /boot/config.txt to ensure correct kernel is loaded based on the Pi model
update_config_txt() {
    local config_path="/boot/firmware/config.txt"
    sudo sed -i '/^\[pi3\]/,+2 d' $config_path
    sudo sed -i '/^\[pi4\]/,+2 d' $config_path
    sudo sed -i '/^\[pi5\]/,+2 d' $config_path
    # Ensure [all] is always at the end
    sudo sed -i '/^\[all\]/d' $config_path
    echo "[pi3]" | sudo tee -a $config_path
    echo "kernel=kernel8.img" | sudo tee -a $config_path
    echo "[pi4]" | sudo tee -a $config_path
    echo "kernel=kernel8.img" | sudo tee -a $config_path
    echo "[pi5]" | sudo tee -a $config_path
    echo "kernel=kernel_2712.img" | sudo tee -a $config_path
    echo "[all]" | sudo tee -a $config_path
}

# Compile and install kernels for Pi3/Pi4 and Pi5
compile_kernel bcm2711_defconfig kernel8
install_kernel kernel8

compile_kernel bcm2712_defconfig kernel_2712
install_kernel kernel_2712

# Update config.txt
update_config_txt

echo "Kernel compilation and installation complete!"

