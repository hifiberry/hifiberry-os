#!/usr/bin/env python3
"""
Configure MPD by updating mixer settings and creating runtime configuration
This script reads /etc/mpd.conf and generates /var/lib/mpd/mpd.conf with updated mixer settings
"""

import os
import sys
import shutil
import subprocess
from pathlib import Path

def get_hw_mixer_info():
    """Get hardware mixer information using config-soundcard"""
    try:
        # Get volume control softvol setting
        mixer_result = subprocess.run(['config-soundcard', '--no-eeprom', '--volume-control-softvol'], 
                                    capture_output=True, text=True)
        hw_result = subprocess.run(['config-soundcard', '--no-eeprom', '--hw'], 
                                 capture_output=True, text=True)
        
        if mixer_result.returncode == 0 and hw_result.returncode == 0:
            mixer = mixer_result.stdout.strip()
            mixer_hw = hw_result.stdout.strip()
            
            return {
                "mixer_type": "hardware",
                "mixer_device": f"hw:{mixer_hw}",
                "mixer_control": mixer,
                "mixer_index": 0
            }
        else:
            # Fallback to software volume
            return {
                "mixer_type": "software"
            }
            
    except Exception as e:
        print(f"Warning: Error getting mixer info: {e}")
        return {
            "mixer_type": "software"
        }

def update_mpd_config(input_file, output_file, mixer_info):
    """Update MPD configuration with new mixer settings"""
    
    # Header comment
    header = f"""# MPD Configuration File
# DO NOT EDIT THIS FILE MANUALLY!
# This file is automatically generated by configure-mpd
# Source configuration: {input_file}
# To make changes, edit {input_file} and restart the mpd service

"""
    
    try:
        with open(input_file, 'r') as f:
            config_lines = f.readlines()
    except FileNotFoundError:
        print(f"Error: Source configuration file not found: {input_file}")
        sys.exit(1)
    except Exception as e:
        print(f"Error reading configuration file: {e}")
        sys.exit(1)
    
    # Process configuration lines
    output_lines = []
    in_audio_output = False
    audio_output_depth = 0
    mixer_lines_added = False
    
    for line in config_lines:
        stripped = line.strip()
        
        # Track audio_output block
        if stripped.startswith('audio_output {'):
            in_audio_output = True
            audio_output_depth = 1
            output_lines.append(line)
            continue
        elif in_audio_output:
            if '{' in line:
                audio_output_depth += line.count('{')
            if '}' in line:
                audio_output_depth -= line.count('}')
                if audio_output_depth == 0:
                    # End of audio_output block, add mixer settings if not already added
                    if not mixer_lines_added:
                        if mixer_info["mixer_type"] == "hardware":
                            output_lines.append(f'\tmixer_type\t\t"hardware"\n')
                            output_lines.append(f'\tmixer_device\t\t"{mixer_info["mixer_device"]}"\n')
                            output_lines.append(f'\tmixer_control\t\t"{mixer_info["mixer_control"]}"\n')
                            output_lines.append(f'\tmixer_index\t\t"{mixer_info["mixer_index"]}"\n')
                        else:
                            output_lines.append(f'\tmixer_type\t\t"software"\n')
                        mixer_lines_added = True
                    in_audio_output = False
                    output_lines.append(line)
                    continue
        
        # Skip existing mixer settings in audio_output blocks
        if in_audio_output and (stripped.startswith('mixer_type') or 
                               stripped.startswith('mixer_device') or 
                               stripped.startswith('mixer_control') or 
                               stripped.startswith('mixer_index')):
            continue
        
        output_lines.append(line)
    
    # Write the updated configuration
    try:
        # Ensure output directory exists
        output_path = Path(output_file)
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        with open(output_file, 'w') as f:
            f.write(header)
            f.writelines(output_lines)
        
        # Set proper ownership and permissions
        try:
            shutil.chown(output_file, user='mpd', group='audio')
            os.chmod(output_file, 0o644)
        except PermissionError:
            print("Warning: Could not set ownership/permissions (may require root)")
            
        print(f"MPD configuration updated: {output_file}")
        
    except Exception as e:
        print(f"Error writing configuration file: {e}")
        sys.exit(1)

def main():
    """Main configuration function"""
    input_config = "/etc/mpd.conf"
    output_config = "/var/lib/mpd/mpd.conf"
    
    # Check if source configuration exists
    if not os.path.exists(input_config):
        print(f"Error: Source configuration file not found: {input_config}")
        sys.exit(1)
    
    print("Configuring MPD...")
    
    # Get mixer information
    mixer_info = get_hw_mixer_info()
    print(f"Mixer configuration: {mixer_info['mixer_type']}")
    if mixer_info["mixer_type"] == "hardware":
        print(f"Hardware mixer: {mixer_info['mixer_control']} on {mixer_info['mixer_device']}")
    
    # Update configuration
    update_mpd_config(input_config, output_config, mixer_info)
    
    print("MPD configuration completed successfully")

if __name__ == "__main__":
    main()
